package com.algorithm.interfaces;import org.apache.spark.sql.Dataset;import java.util.HashMap;public interface AlgorithmInterface {    /**语法层面和抽象类不同--------     * 接口方法只能是public abstract 默认修饰符 抽象类可以是任意的     * 接口内部成员变量只能是public static final 抽象类可以是任意的     * 接口中不能含有静态代码块和静态方法 抽象类可以有     *     * 接口可以被多次实现 抽象类单继承     * 接口内的方法都要被实现 抽象类可以不用     *     *     *     * 设计层面和抽象类不同---------     * 抽象类是对事物的抽象，即对类抽象，而接口是对行为的抽象，抽象类对整个类整体进行抽象，包括属性，行为，但是接口是对类局部     * 进行抽象     *     * 抽象类作为很多子类的父类，它是一种模板方式设计，而接口是一种行为规范，它是一种辐射方式设计。     * 如果接口进行了变更，则所有实现这个接口的类都必须进行相应的变动     * 而对于抽象类，如果需要添加新的方法，可以直接在抽象类中添加具体的实现，子类可以不进行变更。而接口则不行     * @param args     */    /**     * 初始化参数 行为     *     */    HashMap<String,String> getArgs();    /**     * 将算法输入给到该步骤的算法 行为     */    Object getInputData();    void setInputData(Dataset<Dataset> dataset);    /**     * 将算法输出给到下游 行为     */    void setOutputData();    Dataset getOutPutData();    /**     * 计算     */    void compute();    /**     * 将新增的算法注册到算法的容器当中     */    public abstract boolean registerToContainer();}