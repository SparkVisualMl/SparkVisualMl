package com.algorithm.interfaces;import java.util.HashMap;import java.util.List;import java.util.Map;/** * 算法上下文的抽象类 */public interface AlgorithmContextInterface {    /**     * algorithmMap 是用来存放操作名称-对应的算法类全路径包名+类名的。后期用于反射获取操作调用     */    public Map algorithmMap = new HashMap<String,String>();    /**     * 初始化  algorithmMap 是用来存放操作名称-对应的算法类全路径包名+类名的。后期用于反射获取操作调用     * @param maps     */    public abstract void init(HashMap<String,String> maps);    /**     * 获取操作名-映射类 的键值对     * @param operationNames     * @return     */    public abstract HashMap<String,String> getOperationMap(String [] operationNames);    //此处要定义一个异常,getOperationMap返回的map里面的key没有在init后的key里面，即算法没有事先定义好错误异常    /**     * 获取操作步骤     * @param map     * @return     */    public abstract List<String > getOperationSteps(HashMap<String,String> map);    /**     * 调用操作步骤 组合各种算法之间的依赖，输入输出     */    public abstract void invokeStepsToLearn();}