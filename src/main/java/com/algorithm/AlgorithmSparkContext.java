package com.algorithm;import com.algorithm.abstracts.ViewAlgorithm;import com.algorithm.interfaces.AlgorithmContextInterface;import com.algorithm.interfaces.AlgorithmInterface;import com.sun.org.apache.xml.internal.security.algorithms.JCEMapper;import org.apache.spark.sql.Dataset;import java.util.HashMap;import java.util.List;/**工厂模式，方法模板模式，策略模式。配置文件模式 * 先从配置文件中读取已经注册的算法 * 再从数据库中读取用户自定义的算法 */public class AlgorithmSparkContext implements AlgorithmContextInterface{    private ViewAlgorithm sourceViewAlgorithm = null;    private ViewAlgorithm preHandleAlgorithm = null;    private ViewAlgorithm featureProAlgorithm = null;    private ViewAlgorithm mlibAlgorithm = null;    private ViewAlgorithm modelSaveAlgorithm = null;    @Override    public void init(HashMap<String, String> maps) {    }    @Override    public HashMap<String, String> getOperationMap(String[] operationNames) {        return null;    }    @Override    public List<String> getOperationSteps(HashMap<String, String> map) {        return null;    }    @Override    public void invokeStepsToLearn() {    }    //数据源插件    public AlgorithmSparkContext setSourcePlugin(ViewAlgorithm sourceViewAlgorithm){        this.sourceViewAlgorithm = sourceViewAlgorithm;        return this;    }    //数据预处理插件    public AlgorithmSparkContext setPreHandlePlugin(ViewAlgorithm preHandleAlgorithm){        this.preHandleAlgorithm = preHandleAlgorithm;        return this;    }    //数据特征工程插件    public AlgorithmSparkContext setFeatureProPlugin(ViewAlgorithm sourceViewAlgorithm){        this.featureProAlgorithm = featureProAlgorithm;        return this;    }    //机器学习插件    public AlgorithmSparkContext setMlibPlugin(ViewAlgorithm mlibAlgorithm){        this.mlibAlgorithm = mlibAlgorithm;        return this;    }    //机器学习模型保存插件    public AlgorithmSparkContext setModelSavePlugin(ViewAlgorithm modelSavePlugin){        this.modelSaveAlgorithm = modelSavePlugin;        return this;    }}