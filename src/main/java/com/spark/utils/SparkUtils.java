package com.spark.utils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;public class SparkUtils {    private static Logger logger = LoggerFactory.getLogger(SparkUtils.class);    public static String execThreadCmds(String cmd){            StringBuilder sb = new StringBuilder();            try {                final Process process = Runtime.getRuntime().exec(new String[]{"/bin/sh", "-c", cmd});                try {                    new Thread(new Runnable() {                        @Override                        public void run() {                            BufferedReader br = new BufferedReader(                                    new InputStreamReader(process.getInputStream()));                            try {                                while (br.readLine() != null) ;                            } catch (IOException e) {                                e.printStackTrace();                                logger.error(e.getMessage(), e);                            }                        }                    }).start();                    BufferedReader br = null;                    br = new BufferedReader(new InputStreamReader(process.getErrorStream()));                    String line = null;                    while ((line = br.readLine()) != null) {                        logger.info(cmd+"------命令------执行日志" + line);                        sb.append(line);                    }                    process.waitFor();                } catch (InterruptedException e) {                    e.printStackTrace();                    logger.error(e.getMessage(), e);                }                String execResLog = inputStreamToStr(process.getInputStream());                logger.info(" process exec " + cmd);                logger.info("process exec log is :" + execResLog);            } catch (IOException e) {                e.printStackTrace();                logger.error(e.getMessage(), e);            }            return sb.toString();    }    /**     * 执行字符串命令，获取执行命令后的返回结果     * @param cmds     * @return 执行命令后的返回结果     */    public static String execSubmitShell(String cmds){        String execResStr = "";        try {            Process execResPro = Runtime.getRuntime().exec(cmds);            InputStream is = execResPro.getInputStream();            execResStr = inputStreamToStr(is);        }catch (IOException e){            logger.error(e.getMessage());        }        return execResStr;    }    /**     * 执行/bin/sh脚本，带-c的命令     * @param cmds     * @return     * @throws IOException 可能找不到命令文件的路径     */    public static String execSubmitShellArray(String cmds) throws IOException{        String [] cmdArray={"/bin/sh","-c",cmds};        Process proc =Runtime.getRuntime().exec(cmdArray);        return inputStreamToStr(proc.getInputStream());    }    /**     * 将输入流转为字符串     * @param is     * @return     * @throws IOException 可能找不到命令文件的路径     */    private static String inputStreamToStr(InputStream is) throws IOException{        BufferedReader br = new BufferedReader(new InputStreamReader(is));        StringBuffer sb = new StringBuffer();        String line;        while ((line = br.readLine()) != null) {            sb.append(line).append("\n");        }        String result = sb.toString();        return result;    }}