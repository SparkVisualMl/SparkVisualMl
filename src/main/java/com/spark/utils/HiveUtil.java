package com.spark.utils;import org.slf4j.LoggerFactory;import org.slf4j.Logger;import java.sql.Connection;import java.sql.SQLException;import java.sql.ResultSet;import java.sql.DriverManager;import org.apache.commons.configuration.ConfigurationException;import java.sql.Statement;/** * spark 连接hive的jdbc操作工具封装体 */public class HiveUtil {    /**     * 给hive连接信息赋初始值     */    //网上写 org.apache.hadoop.hive.jdbc.HiveDriver ,新版本不能这样写    private static String driverName = "org.apache.hive.jdbc.HiveDriver";    //这里是hive2，网上其他人都写hive,在高版本中会报错    private static String url = "jdbc:hive2://master:10000/default";    private static String user = "hive";    private static String password = "hive";    private static ResultSet res;    private static final Logger logger = LoggerFactory.getLogger(HiveUtil.class);    /**     *     * 初始化配置文件配置     * @throws ConfigurationException     */    private static void initConfig() throws ConfigurationException{        url=ConfigUtil.getValueByKeyInConfig("spark.datasource.hive.url");        user=ConfigUtil.getValueByKeyInConfig("spark.datasource.hive.user");        password=ConfigUtil.getValueByKeyInConfig("spark.datasource.hive.password");        driverName=ConfigUtil.getValueByKeyInConfig("park.datasource.hive.driverName");    }    /**     * 获取hive 的连接     * @return     * @throws ClassNotFoundException     * @throws SQLException     * @throws ConfigurationException     */    private static Connection getConn() throws ClassNotFoundException, SQLException,ConfigurationException{        initConfig();        Class.forName(driverName);        Connection conn = DriverManager.getConnection(url, user, password);        return conn;    }    /**     * 统计表记录数     * @param stmt     * @param tableName     * @throws SQLException     */    private static void countData(Statement stmt, String tableName) throws SQLException {        StringBuilder sb = new StringBuilder();        sb.append("select count(1) from ");        sb.append(tableName);        String sql = sb.toString();        logger.info("Running:" + sql);        res = stmt.executeQuery(sql);        logger.info("执行“regular hive query”运行结果:");        while (res.next()) {            logger.info("count ------>" + res.getString(1));        }    }    /**     * 选择全量数据     * @param stmt     * @param tableName     * @throws SQLException     */    private static void selectData(Statement stmt, String tableName) throws SQLException {        StringBuilder sb = new StringBuilder();        sb.append("select * from ");        sb.append(tableName);        String sql = sb.toString();        logger.info("Running:" + sql);        res = stmt.executeQuery(sql);        logger.info("执行 select * query 运行结果:");        while (res.next()) {            System.out.println(res.getInt(1) + "\t" + res.getString(2));        }    }    /**     * 将数据导入到表中     * @param stmt     * @param tableName     * @throws SQLException     */    private static void loadData(Statement stmt, String tableName,String filepath,String terminated) throws SQLException {        //目录 ，我的是hive安装的机子的虚拟机的home目录下        StringBuilder sb = new StringBuilder();        String sql = "load data local inpath '" + filepath +"'";        sb.append(sql);        sb.append(" into table terminated by ");        System.out.println("Running:" + sb.toString());        stmt.execute(sql.toString());    }    /**     * 查看表的元数据信息     * @param stmt     * @param tableName     * @throws SQLException     */    private static void describeTables(Statement stmt, String tableName) throws SQLException {        String sql = "describe ";        String sqls = sql+tableName;        logger.info("Running:" + sql);        res = stmt.executeQuery(sqls);        logger.info("执行 describe table 运行结果:");        while (res.next()) {            System.out.println(res.getString(1) + "\t" + res.getString(2));        }    }    /**     * 列举全部的表     * @param stmt     * @param tableName     * @throws SQLException     */    private static void showTables(Statement stmt, String tableName) throws SQLException {        String sql = "show tables '" + tableName + "'";        logger.info("Running:" + sql);        res = stmt.executeQuery(sql);        logger.info("执行 show tables 运行结果:");        if (res.next()) {            System.out.println(res.getString(1));        }    }    /**     * 创建表     * @param stmt     * @param tableName     * @param fieldArray     * @param typeArray     * @param terminated     * @throws SQLException     */    private static void createTable(Statement stmt, String tableName,String [] fieldArray,String [] typeArray,String terminated) throws SQLException {        String sql = "create table" + tableName+ " (key int, value string)"  +"row format delimited fields terminated by";        stmt.execute(sql);    }    /**     * 删除表     * @param stmt     * @param tableName     * @return     * @throws SQLException     */    private static String dropTable(Statement stmt,String tableName) throws SQLException {        // 创建的表名        String sql = "drop table" + tableName;        stmt.execute(sql);        return tableName;    }}